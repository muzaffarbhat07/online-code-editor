{"version":3,"sources":["hooks/useLocalStorage.js","components/Editor.js","components/App.js","index.js"],"names":["useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","Editor","language","displayName","onChange","open","setOpen","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAuBeA,MApBf,SAAyBC,EAAKC,GAC5B,IAAMC,EAFO,sBAEgBF,EAC7B,EAA0BG,oBAAS,WACjC,IAAMC,EAAYC,aAAaC,QAAQJ,GACvC,OAAiB,MAAbE,EACKG,KAAKC,MAAMJ,GAEQ,oBAAjBH,EACFA,IAEAA,KARX,mBAAOQ,EAAP,KAAcC,EAAd,KAeA,OAJAC,qBAAU,WACRN,aAAaO,QAAQV,EAAaK,KAAKM,UAAUJ,MAChD,CAACP,EAAaO,IAEV,CAACA,EAAOC,I,8DCwBFI,EAlCA,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,YAAaP,EAAqB,EAArBA,MAAOQ,EAAc,EAAdA,SAE9C,EAAwBd,oBAAS,GAAjC,mBAAOe,EAAP,KAAaC,EAAb,KAIA,OACE,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACE,sBAAKE,UAAU,eAAf,UACIJ,EACF,wBACEK,KAAK,SACLD,UAAU,sBACVE,QAAU,kBAAMH,GAAQ,SAAAI,GAAQ,OAAKA,MAHvC,SAKE,cAAC,IAAD,CAAiBC,KAAON,EAAOO,IAAgBC,WAGnD,cAAC,aAAD,CACEC,eAhBe,SAACC,EAAQC,EAAMpB,GAClCQ,EAASR,IAgBLA,MAAOA,EACPW,UAAU,sBACVU,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMlB,EACNmB,MAAO,WACPC,aAAa,SCyBRC,MA1Df,WACE,MAAwBrC,EAAgB,OAAQ,IAAhD,mBAAOsC,EAAP,KAAaC,EAAb,KACA,EAAsBvC,EAAgB,MAAO,IAA7C,mBAAOwC,EAAP,KAAYC,EAAZ,KACA,EAAoBzC,EAAgB,KAAM,IAA1C,mBAAO0C,EAAP,KAAWC,EAAX,KACA,EAA4BvC,mBAAS,IAArC,mBAAOwC,EAAP,KAAeC,EAAf,KAgBA,OAdAjC,qBAAU,WACR,IAAMkC,EAAUC,YAAW,WACxBF,EAAU,kCAAD,OAEAP,EAFA,mCAGCE,EAHD,qCAIEE,EAJF,yCAOT,KAEH,OAAO,kBAAMM,aAAaF,MACzB,CAACR,EAAME,EAAKE,IAGb,qCACE,sBAAKrB,UAAU,gBAAf,UACE,cAAC,EAAD,CACEL,SAAS,MACTC,YAAY,OACZP,MAAO4B,EACPpB,SAAUqB,IAEZ,cAAC,EAAD,CACEvB,SAAS,MACTC,YAAY,MACZP,MAAO8B,EACPtB,SAAUuB,IAEZ,cAAC,EAAD,CACEzB,SAAS,aACTC,YAAY,KACZP,MAAOgC,EACPxB,SAAUyB,OAGd,qBAAKtB,UAAU,OAAf,SACE,wBACEuB,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,e,MChDjBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c5ba9c50.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\nconst PREFIX = 'online-code-editor-'\r\nfunction useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue != null)\r\n      return JSON.parse(jsonValue)\r\n\r\n    if (typeof initialValue === 'function')\r\n      return initialValue()\r\n    else\r\n      return initialValue\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue]\r\n}\r\n \r\nexport default useLocalStorage;","import React, { useState } from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Editor = ({ language, displayName, value, onChange}) => {\r\n  \r\n  const [open, setOpen] = useState(true)\r\n  const handleChange = (editor, data, value) => {\r\n    onChange(value)\r\n  }\r\n  return ( \r\n    <div className={`editor-container ${open ? '' : 'collapsed' }`}>\r\n      <div className=\"editor-title\">\r\n        { displayName }\r\n        <button \r\n          type=\"button\"\r\n          className=\"expand-collapse-btn\"\r\n          onClick={ () => setOpen(prevOpen => !prevOpen)}\r\n        >\r\n          <FontAwesomeIcon icon={ open ? faCompressAlt : faExpandAlt } />\r\n        </button>\r\n      </div>\r\n      <ControlledEditor \r\n        onBeforeChange={handleChange}\r\n        value={value}\r\n        className=\"code-mirror-wrapper\"\r\n        options={{\r\n          lineWrapping: true,\r\n          lint: true,\r\n          mode: language,\r\n          theme: \"material\",\r\n          lineNumbers: true\r\n        }}\r\n      />\r\n    </div>\r\n   );\r\n}\r\n \r\nexport default Editor;","import React, { useState, useEffect } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Editor from './Editor';\n\nfunction App() {\n  const [html, setHtml] = useLocalStorage('html', '')\n  const [css, setCss] = useLocalStorage('css', '')\n  const [js, setJs] = useLocalStorage('js', '')\n  const [srcDoc, setSrcDoc] = useState('')\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n       setSrcDoc(`\n       <html>\n        <body>${html}</body>\n        <style>${css}</style>\n        <script>${js}</script>\n      </html>\n       `)\n    }, 500)\n\n    return () => clearTimeout(timeout)\n  }, [html, css, js])\n  \n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor\n          language=\"xml\"\n          displayName=\"HTML\"\n          value={html} \n          onChange={setHtml}\n        />\n        <Editor \n          language=\"css\"\n          displayName=\"CSS\"\n          value={css} \n          onChange={setCss}\n        />\n        <Editor \n          language=\"javascript\"\n          displayName=\"JS\"\n          value={js} \n          onChange={setJs}\n        />\n      </div>\n      <div className=\"pane\">\n        <iframe \n          srcDoc={srcDoc}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        >\n\n        </iframe>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}